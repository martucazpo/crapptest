{"componentChunkName":"component---src-templates-lesson-jsx","path":"/javascript-algorithms-and-data-structures/learn-functional-programming-by-building-a-spreadsheet/5d79253297c0ebb149ea9fed/","result":{"data":{"markdownRemark":{"id":"db426537-4b61-5dc7-9ed4-94e1245ced9f","frontmatter":{"challengeType":0,"dashedName":"step-1","title":"Step 1","id":"5d79253297c0ebb149ea9fed"},"rawMarkdownBody":"\n# --description--\n\nIn functional programming, we prefer immutable values over mutable values.\n\nMutable values (declared with `var` or `let`) can lead to unexpected behaviors and bugs. Values declared with `const` cannot be reassigned, which makes using them easier because you don't have to keep track of their values.\n\nStart by creating an empty `infixToFunction` object using `const`.\n\n# --hints--\n\nSee description above for instructions.\n\n```js\nassert(code.replace(/\\s/g, '').includes('constinfixToFunction={}'));\n```\n\n# --seed--\n\n## --before-user-code--\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Spreadsheet</title>\n  <style>\n    #container {\n      display: grid;\n      grid-template-columns: 50px repeat(10, 200px);\n      grid-template-rows: repeat(11, 30px);\n    }\n    .label {\n      background-color: lightgray;\n      text-align: center;\n      vertical-align: middle;\n      line-height: 30px;\n    }\n  </style>\n</head>\n<body>\n<div id=\"container\">\n  <div></div>\n</div>\n```\n\n## --after-user-code--\n\n```html\n</body>\n</html>\n```\n\n## --seed-contents--\n\n```html\n<script>\n--fcc-editable-region--\n\n\n--fcc-editable-region--\n</script>\n```\n\n# --solutions--\n\n```html\n<script>\nconst infixToFunction = {};\n</script>\n```\n"}},"pageContext":{"relativeDirectory":"javascript-algorithms-and-data-structures/learn-functional-programming-by-building-a-spreadsheet","id":"5d79253297c0ebb149ea9fed","dashedName":"step-1"}},"staticQueryHashes":["4279786174"],"slicesMap":{}}