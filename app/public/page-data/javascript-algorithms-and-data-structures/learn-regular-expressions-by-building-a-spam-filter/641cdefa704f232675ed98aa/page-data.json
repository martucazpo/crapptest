{"componentChunkName":"component---src-templates-lesson-jsx","path":"/javascript-algorithms-and-data-structures/learn-regular-expressions-by-building-a-spam-filter/641cdefa704f232675ed98aa/","result":{"data":{"markdownRemark":{"id":"9fd02d92-de36-5c87-a76d-88edafd92775","frontmatter":{"challengeType":0,"dashedName":"step-4","title":"Step 4","id":"641cdefa704f232675ed98aa"},"rawMarkdownBody":"\n# --description--\n\nCreate an `isSpam` function using the `const` keyword and arrow syntax. The function should take a single parameter `msg` and implicitly return `false` for now.\n\n# --hints--\n\nYou should use `const` to delcare an `isSpam` variable.\n\n```js\nassert.match(code, /const\\s+isSpam\\s*=/);\n```\n\nYou should use arrow syntax to assign `isSpam` a function.\n\n```js\nassert.match(code, /const\\s+isSpam\\s*=\\s*\\(?.*\\)?\\s*=>/);\n```\n\nYour `isSpam` function should have a single `msg` parameter.\n\n```js\nassert.match(code, /const\\s+isSpam\\s*=\\s*\\(?\\s*msg\\s*\\)?/);\n```\n\nYour `isSpam` function should implicitly return `false`.\n\n```js\nassert.match(code, /const\\s+isSpam\\s*=\\s*\\(?\\s*msg\\s*\\)?\\s*=>\\s*false;?/);\n```\n\n# --seed--\n\n## --seed-contents--\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>\n```\n\n```css\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}\n```\n\n```js\nconst messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n});\n```\n"}},"pageContext":{"relativeDirectory":"javascript-algorithms-and-data-structures/learn-regular-expressions-by-building-a-spam-filter","id":"641cdefa704f232675ed98aa","dashedName":"step-4"}},"staticQueryHashes":["4279786174"],"slicesMap":{}}