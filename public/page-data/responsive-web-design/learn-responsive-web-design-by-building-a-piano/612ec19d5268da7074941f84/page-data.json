{"componentChunkName":"component---src-templates-lesson-jsx","path":"/responsive-web-design/learn-responsive-web-design-by-building-a-piano/612ec19d5268da7074941f84/","result":{"data":{"markdownRemark":{"id":"15001462-a214-5601-ab61-2a4a1b141291","frontmatter":{"challengeType":0,"dashedName":"step-32","title":"Step 32","id":"612ec19d5268da7074941f84"},"rawMarkdownBody":"\n# --description--\n\nLogical operators can be used to construct more complex media queries. The `and` logical operator is used to query two media conditions.\n\nFor example, a media query that targets a display width between 500px and 1000px would be:\n\n```css\n@media (min-width: 500px) and (max-width: 1000px){\n\n}\n```\n\nAdd another `@media` rule to apply if the browser window is wider than `769px` but smaller than `1199px`.\n\n# --hints--\n\nYou should add a new `@media` query.\n\n```js\nassert(new __helpers.CSSHelp(document).getCSSRules('media')?.length === 2);\n```\n\nYour `@media` query should have a `min-width` of `769px` and a `max-width` of `1199px`.\n\n```js\nconst mediaText = new __helpers.CSSHelp(document).getCSSRules('media')[1]?.media?.mediaText;\nassert(mediaText === '(max-width: 1199px) and (min-width: 769px)' || mediaText === '(min-width: 769px) and (max-width: 1199px)');\n```\n\n\n# --seed--\n\n## --seed-contents--\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Piano</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\">\n  </head>\n  <body>\n    <div id=\"piano\">\n      <img class=\"logo\" src=\"/images/fcc.png\" alt=\"freeCodeCamp Logo\" />\n      <div class=\"keys\">\n        <div class=\"key\"></div>\n        <div class=\"key black--key\"></div>\n        <div class=\"key black--key\"></div>\n        <div class=\"key\"></div>\n        <div class=\"key black--key\"></div>\n        <div class=\"key black--key\"></div>\n        <div class=\"key black--key\"></div>\n\n        <div class=\"key\"></div>\n        <div class=\"key black--key\"></div>\n        <div class=\"key black--key\"></div>\n        <div class=\"key\"></div>\n        <div class=\"key black--key\"></div>\n        <div class=\"key black--key\"></div>\n        <div class=\"key black--key\"></div>\n\n        <div class=\"key\"></div>\n        <div class=\"key black--key\"></div>\n        <div class=\"key black--key\"></div>\n        <div class=\"key\"></div>\n        <div class=\"key black--key\"></div>\n        <div class=\"key black--key\"></div>\n        <div class=\"key black--key\"></div>\n      </div>\n    </div>\n  </body>\n</html>\n```\n\n```css\nhtml {\n  box-sizing: border-box;\n}\n\n*, *::before, *::after {\n  box-sizing: inherit;\n}\n\n#piano {\n  background-color: #00471b;\n  width: 992px;\n  height: 290px;\n  margin: 80px auto;\n  padding: 90px 20px 0 20px;\n  position: relative;\n  border-radius: 10px;\n}\n\n.keys {\n  background-color: #040404;\n  width: 949px;\n  height: 180px;\n  padding-left: 2px;\n  overflow: hidden;\n}\n\n.key {\n  background-color: #ffffff;\n  position: relative;\n  width: 41px;\n  height: 175px;\n  margin: 2px;\n  float: left;\n  border-radius: 0 0 3px 3px;\n}\n\n.key.black--key::after {\n  background-color: #1d1e22;\n  content: \"\";\n  position: absolute;\n  left: -18px;\n  width: 32px;\n  height: 100px;\n  border-radius: 0 0 3px 3px;\n}\n\n.logo {\n  width: 200px;\n  position: absolute;\n  top: 23px;\n}\n\n@media (max-width: 768px) {\n  #piano {\n    width: 358px;\n  }\n\n  .keys {\n    width: 318px;\n  }\n\n  .logo {\n    width: 150px;\n  }\n}\n\n--fcc-editable-region--\n\n--fcc-editable-region--\n```\n"}},"pageContext":{"relativeDirectory":"responsive-web-design/learn-responsive-web-design-by-building-a-piano","id":"612ec19d5268da7074941f84","dashedName":"step-32"}},"staticQueryHashes":["4279786174"],"slicesMap":{}}