{"componentChunkName":"component---src-templates-lesson-jsx","path":"/javascript-algorithms-and-data-structures/learn-advanced-array-methods-by-building-a-statistics-calculator/6352e96d2604f813c656750b/","result":{"data":{"markdownRemark":{"id":"4e6025f9-7232-52fc-9311-0d1db5015932","frontmatter":{"challengeType":0,"dashedName":"step-27","title":"Step 27","id":"6352e96d2604f813c656750b"},"rawMarkdownBody":"\n# --description--\n\nRemember that the `.forEach()` method allows you to run a callback function for each element in the array.\n\nUse the `.forEach()` method to loop through the `array`. In the callback, use the `el` argument to access the `counts` object and increment the count for each number.\n\n# --hints--\n\nYour `getMode` function should use the `.forEach()` method.\n\n```js\nassert.match(getMode.toString(), /array\\.forEach\\(/);\n```\n\nYour `.forEach()` method should have a callback function which takes an `el` argument.\n\n```js\nconsole.log(getMode.toString());\nassert.match(getMode.toString(), /(array\\.forEach\\(\\(?\\s*el\\s*\\)?\\s*=>|array\\.forEach\\(function\\s*\\(?el\\)?\\s*\\{)/);\n```\n\nYour `.forEach()` method should increment the count for each number. Don't forget the fallback value.\n\n```js\nassert.match(getMode.toString(), /(array\\.forEach\\(\\(?\\s*el\\s*\\)?\\s*=>|array\\.forEach\\(function\\s*\\(?el\\)?\\s*\\{)\\s*\\{?\\s*(return)?\\s*counts\\[\\s*el\\s*\\]\\s*=\\s*\\(\\s*counts\\[\\s*el\\s*\\]\\s*\\|\\|\\s*0\\s*\\)\\s*\\+\\s*1\\s*\\}?/);\n```\n\n# --seed--\n\n## --seed-contents--\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>\n```\n\n```css\nbody {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}\n```\n\n```js\nconst getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  const median =\n    array.length % 2 === 0\n      ? getMean([sorted[array.length / 2], sorted[array.length / 2 - 1]])\n      : sorted[Math.floor(array.length / 2)];\n  return median;\n}\n\n--fcc-editable-region--\nconst getMode = (array) => {\n  const counts = {};\n\n}\n--fcc-editable-region--\n\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n}\n```\n"}},"pageContext":{"relativeDirectory":"javascript-algorithms-and-data-structures/learn-advanced-array-methods-by-building-a-statistics-calculator","id":"6352e96d2604f813c656750b","dashedName":"step-27"}},"staticQueryHashes":["4279786174"],"slicesMap":{}}