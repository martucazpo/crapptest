{"componentChunkName":"component---src-templates-lesson-jsx","path":"/javascript-algorithms-and-data-structures/learn-advanced-array-methods-by-building-a-statistics-calculator/63508c898d753754757bd5e3/","result":{"data":{"markdownRemark":{"id":"61799ae4-72bc-5d9a-943c-0b7d8658b955","frontmatter":{"challengeType":0,"dashedName":"step-21","title":"Step 21","id":"63508c898d753754757bd5e3"},"rawMarkdownBody":"\n# --description--\n\nBy default, the `.sort()` method converts the elements of an array into strings, then sorts them alphabetically. This works well for strings, but not so well for numbers. For example, `10` comes before `2` when sorted as strings, but `2` comes before `10` when sorted as numbers.\n\nTo fix this, you can pass in a callback function to the `.sort()` method. This function takes two parameters, which represent the two elements being compared. The function should return a value less than `0` if the first element should come before the second element, a value greater than `0` if the first element should come after the second element, and `0` if the two elements should remain in their current positions.\n\nTo sort your numbers from smallest to largest, pass a callback function that takes parameters `a` and `b`, and returns the result of subtracting `b` from `a`.\n\n# --hints--\n\nYour `sort` method should have a callback function which takes an `a` and a `b` argument.\n\n```js\nassert.match(getMedian.toString(), /(array\\.sort\\(\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>|array\\.sort\\(function\\s*\\(\\s*a\\s*,\\s*b\\)\\s*\\{)/)\n```\n\nYour `sort` method should return the result of subtracting `b` from `a`.\n\n```js\nassert.match(getMedian.toString(), /(array\\.sort\\(\\(\\s*a\\s*,\\s*b\\s*\\)\\s*=>|array\\.sort\\(function\\s*\\(\\s*a\\s*,\\s*b\\)\\s*\\{)\\s*(return)?\\s*a\\s*\\-\\s*b/)\n```\n\n# --seed--\n\n## --seed-contents--\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>\n```\n\n```css\nbody {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}\n```\n\n```js\nconst getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\n--fcc-editable-region--\nconst getMedian = (array) => {\n  const sorted = array.sort();\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n}\n```\n"}},"pageContext":{"relativeDirectory":"javascript-algorithms-and-data-structures/learn-advanced-array-methods-by-building-a-statistics-calculator","id":"63508c898d753754757bd5e3","dashedName":"step-21"}},"staticQueryHashes":["4279786174"],"slicesMap":{}}