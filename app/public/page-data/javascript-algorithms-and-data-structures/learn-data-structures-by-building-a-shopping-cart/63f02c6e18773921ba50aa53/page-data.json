{"componentChunkName":"component---src-templates-lesson-jsx","path":"/javascript-algorithms-and-data-structures/learn-data-structures-by-building-a-shopping-cart/63f02c6e18773921ba50aa53/","result":{"data":{"markdownRemark":{"id":"aac3304f-de59-5d98-806a-7cf61dab7347","frontmatter":{"challengeType":0,"dashedName":"step-46","title":"Step 46","id":"63f02c6e18773921ba50aa53"},"rawMarkdownBody":"\n# --description--\n\nBecause of the way computers store and work with numbers, calculations involving decimal numbers can result in some strange behavior. For example, `0.1 + 0.2` is not equal to `0.3`. This is because computers store decimal numbers as binary fractions, and some binary fractions cannot be represented exactly as decimal fractions.\n\nWe want to clean up the number result from your calculation. Wrap your calculation in parentheses (don't include the `return` statement!) and call the `.toFixed()` method on it. Pass the `.toFixed()` method the number `2` as an argument. This will round the number to two decimal places and return a string.\n\n# --hints--\n\nYou should wrap your calculation in parentheses.\n\n```js\nconst afterCalculateTaxes = code.split('calculateTaxes')[1];\nassert.match(afterCalculateTaxes, /return\\s*\\(\\s*\\(\\s*this\\s*\\.\\s*taxRate\\s*\\/\\s*100\\s*\\)\\s*\\*\\s*amount\\s*\\)/)\n```\n\nYou should call the `.toFixed()` method on your calculation.\n\n```js\nconst afterCalculateTaxes = code.split('calculateTaxes')[1];\nassert.match(afterCalculateTaxes, /return\\s*\\(\\s*\\(\\s*this\\s*\\.\\s*taxRate\\s*\\/\\s*100\\s*\\)\\s*\\*\\s*amount\\s*\\)\\s*\\.\\s*toFixed\\(/)\n```\n\nYou should pass the `.toFixed()` method the number `2` as an argument.\n\n```js\nconst afterCalculateTaxes = code.split('calculateTaxes')[1];\nassert.match(afterCalculateTaxes, /return\\s*\\(\\s*\\(\\s*this\\s*\\.\\s*taxRate\\s*\\/\\s*100\\s*\\)\\s*\\*\\s*amount\\s*\\)\\s*\\.\\s*toFixed\\s*\\(\\s*2\\s*\\)/)\n```\n\n# --seed--\n\n## --seed-contents--\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>freeCodeCamp Shopping Cart</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <header>\n      <h1 class=\"title\">Desserts Page</h1>\n    </header>\n    <main>\n      <button id=\"cart-btn\" type=\"button\" class=\"btn\">\n        <span id=\"show-hide-cart\">Show</span> Cart\n      </button>\n      <div id=\"cart-container\">\n        <button class=\"btn\" id=\"clear-cart-btn\">Clear Cart</button>\n        <div id=\"products-container\"></div>\n        <p>Total number of items: <span id=\"total-items\">0</span></p>\n        <p>Subtotal: <span id=\"subtotal\">$0</span></p>\n        <p>Taxes: <span id=\"taxes\">$0</span></p>\n        <p>Total: <span id=\"total\">$0</span></p>\n      </div>\n      <div id=\"dessert-card-container\"></div>\n    </main>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>\n```\n\n```css\n*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\n.title {\n  color: var(--light-grey);\n  text-align: center;\n  margin: 25px 0;\n}\n\n#dessert-card-container {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  align-items: center;\n}\n\n.dessert-card {\n  background-color: var(--light-grey);\n  padding: 15px;\n  text-align: center;\n  border-radius: 15px;\n  margin: 20px 10px;\n}\n\n.dessert-price {\n  font-size: 1.2rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 100px;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#cart-btn {\n  position: absolute;\n  top: 0;\n  right: 0;\n}\n\n.add-to-cart-btn {\n  margin: 30px auto 10px;\n}\n\n#cart-container {\n  display: none;\n  position: absolute;\n  top: 60px;\n  right: 0;\n  background-color: var(--light-grey);\n  width: 200px;\n  height: 400px;\n  border: 8px double var(--black);\n  border-radius: 15px;\n  text-align: center;\n  font-size: 1.2rem;\n  overflow-y: scroll;\n}\n\n.product {\n  margin: 25px 0;\n}\n\n.product-count {\n  display: inline-block;\n  margin-right: 10px;\n}\n\n.product-category {\n  margin: 10px 0;\n}\n\n@media (min-width: 768px) {\n  #dessert-card-container {\n    flex-direction: row;\n  }\n\n  .dessert-card {\n    flex: 1 0 21%;\n  }\n\n  #cart-container {\n    width: 300px;\n  }\n}\n```\n\n```js\nconst cartContainer = document.getElementById(\"cart-container\");\nconst productsContainer = document.getElementById(\"products-container\");\nconst dessertCards = document.getElementById(\"dessert-card-container\");\nconst cartBtn = document.getElementById(\"cart-btn\");\nconst clearCartBtn = document.getElementById(\"clear-cart-btn\");\nconst totalNumberOfItems = document.getElementById(\"total-items\");\nconst cartSubTotal = document.getElementById(\"subtotal\");\nconst cartTaxes = document.getElementById(\"taxes\");\nconst cartTotal = document.getElementById(\"total\");\nconst showHideCartSpan = document.getElementById(\"show-hide-cart\");\nlet isCartShowing = false;\n\nconst products = [\n  {\n    id: 1,\n    name: \"Vanilla Cupcakes (6 Pack)\",\n    price: 12.99,\n    category: \"Cupcake\",\n  },\n  {\n    id: 2,\n    name: \"French Macaroon\",\n    price: 3.99,\n    category: \"Macaroon\",\n  },\n  {\n    id: 3,\n    name: \"Pumpkin Cupcake\",\n    price: 3.99,\n    category: \"Cupcake\",\n  },\n  {\n    id: 4,\n    name: \"Chocolate Cupcake\",\n    price: 5.99,\n    category: \"Cupcake\",\n  },\n  {\n    id: 5,\n    name: \"Chocolate Pretzels (4 Pack)\",\n    price: 10.99,\n    category: \"Pretzel\",\n  },\n  {\n    id: 6,\n    name: \"Strawberry Ice Cream\",\n    price: 2.99,\n    category: \"Ice Cream\",\n  },\n  {\n    id: 7,\n    name: \"Chocolate Macaroons (4 Pack)\",\n    price: 9.99,\n    category: \"Macaroon\",\n  },\n  {\n    id: 8,\n    name: \"Strawberry Pretzel\",\n    price: 4.99,\n    category: \"Pretzel\",\n  },\n  {\n    id: 9,\n    name: \"Butter Pecan Ice Cream\",\n    price: 2.99,\n    category: \"Ice Cream\",\n  },\n  {\n    id: 10,\n    name: \"Rocky Road Ice Cream\",\n    price: 2.99,\n    category: \"Ice Cream\",\n  },\n  {\n    id: 11,\n    name: \"Vanilla Macaroons (5 Pack)\",\n    price: 11.99,\n    category: \"Macaroon\",\n  },\n  {\n    id: 12,\n    name: \"Lemon Cupcakes (4 Pack)\",\n    price: 12.99,\n    category: \"Cupcake\",\n  },\n];\n\nproducts.forEach(\n  ({ name, id, price, category }) => {\n    dessertCards.innerHTML += `\n      <div class=\"dessert-card\">\n        <h2>${name}</h2>\n        <p class=\"dessert-price\">$${price}</p>\n        <p class=\"product-category\">Category: ${category}</p>\n        <button \n          id=\"${id}\" \n          class=\"btn add-to-cart-btn\">Add to cart\n        </button>\n      </div>\n    `;\n  }\n);\n\nclass ShoppingCart {\n  constructor() {\n    this.items = [];\n    this.total = 0;\n    this.taxRate = 8.25;\n  }\n\n  addItem(id, products) {\n    const product = products.find((item) => item.id === id);\n    const { name, price } = product;\n    this.items.push(product);\n\n    const totalCountPerProduct = {};\n    this.items.forEach((dessert) => {\n      totalCountPerProduct[dessert.id] = (totalCountPerProduct[dessert.id] || 0) + 1;\n    })\n\n    const currentProductCount = totalCountPerProduct[product.id];\n    const currentProductCountSpan = document.getElementById(`product-count-for-id${id}`);\n\n    currentProductCount > 1 \n      ? currentProductCountSpan.textContent = `${currentProductCount}x`\n      : productsContainer.innerHTML += `\n      <div id=dessert${id} class=\"product\">\n        <p>\n          <span class=\"product-count\" id=product-count-for-id${id}></span>${name}\n        </p>\n        <p>${price}</p>\n      </div>\n      `;\n  }\n\n  getCounts() {\n    return this.items.length;\n  }\n\n--fcc-editable-region--\n  calculateTaxes(amount) {\n    return (this.taxRate / 100) * amount;\n  }\n--fcc-editable-region--\n\n  calculateTotal() {\n    const subTotal = this.items.reduce((total, item) => total + item.price, 0);\n  }\n};\n\nconst cart = new ShoppingCart();\nconst addToCartBtns = document.getElementsByClassName(\"add-to-cart-btn\");\n\n[...addToCartBtns].forEach(\n  (btn) => {\n    btn.addEventListener(\"click\", (event) => {\n      cart.addItem(Number(event.target.id), products);\n      totalNumberOfItems.textContent = cart.getCounts();\n    })\n  }\n);\n\ncartBtn.addEventListener(\"click\", () => {\n  isCartShowing = !isCartShowing;\n  showHideCartSpan.textContent = isCartShowing ? \"Hide\" : \"Show\";\n  cartContainer.style.display = isCartShowing ? \"block\" : \"none\";\n});\n```\n"}},"pageContext":{"relativeDirectory":"javascript-algorithms-and-data-structures/learn-data-structures-by-building-a-shopping-cart","id":"63f02c6e18773921ba50aa53","dashedName":"step-46"}},"staticQueryHashes":["4279786174"],"slicesMap":{}}