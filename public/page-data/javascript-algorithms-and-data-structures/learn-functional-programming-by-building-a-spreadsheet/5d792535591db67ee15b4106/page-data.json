{"componentChunkName":"component---src-templates-lesson-jsx","path":"/javascript-algorithms-and-data-structures/learn-functional-programming-by-building-a-spreadsheet/5d792535591db67ee15b4106/","result":{"data":{"markdownRemark":{"id":"7f57295f-091c-5793-a465-56d6740b35b6","frontmatter":{"challengeType":0,"dashedName":"step-45","title":"Step 45","id":"5d792535591db67ee15b4106"},"rawMarkdownBody":"\n# --description--\n\nUse the ternary operator to return `[]` if `start > end` and `[start].concat([end])` otherwise.\n\n# --hints--\n\nSee description above for instructions.\n\n```js\nassert(\n  JSON.stringify(range(3, 2)) === '[]' &&\n    JSON.stringify(range(1, 3)) === '[1,3]'\n);\n```\n\n# --seed--\n\n## --before-user-code--\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Spreadsheet</title>\n  <style>\n    #container {\n      display: grid;\n      grid-template-columns: 50px repeat(10, 200px);\n      grid-template-rows: repeat(11, 30px);\n    }\n    .label {\n      background-color: lightgray;\n      text-align: center;\n      vertical-align: middle;\n      line-height: 30px;\n    }\n  </style>\n</head>\n<body>\n<div id=\"container\">\n  <div></div>\n</div>\n```\n\n## --after-user-code--\n\n```html\n</body>\n</html>\n```\n\n## --seed-contents--\n\n```html\n<script>\n\nconst infixToFunction = {\n  \"+\": (x, y) => x + y,\n  \"-\": (x, y) => x - y,\n  \"*\": (x, y) => x * y,\n  \"/\": (x, y) => x / y\n};\n\nconst infixEval = (str, regex) =>\n  str.replace(regex, (_, arg1, fn, arg2) =>\n    infixToFunction[fn](parseFloat(arg1), parseFloat(arg2))\n  );\n\nconst highPrecedence = str => {\n  const regex = /([0-9.]+)([*\\/])([0-9.]+)/;\n  const str2 = infixEval(str, regex);\n  return str === str2 ? str : highPrecedence(str2);\n};\n\nconst spreadsheetFunctions = {\n  \"\": x => x\n};\n\nconst applyFn = str => {\n  const noHigh = highPrecedence(str);\n  const infix = /([0-9.]+)([+-])([0-9.]+)/;\n  const str2 = infixEval(noHigh, infix);\n  const regex = /([a-z]*)\\(([0-9., ]*)\\)(?!.*\\()/i;\n  const toNumberList = args => args.split(\",\").map(parseFloat);\n  const applyFunction = (fn, args) =>\n    spreadsheetFunctions[fn.toLowerCase()](toNumberList(args));\n  return str2.replace(\n    regex,\n    (match, fn, args) =>\n      spreadsheetFunctions.hasOwnProperty(fn.toLowerCase()) ? applyFunction(fn, args) : match\n  );\n};\n\n--fcc-editable-region--\nconst range = (start, end) => {\n  return [start].concat([end]);\n}\n--fcc-editable-region--\n\n\n</script>\n```\n\n# --solutions--\n\n```html\n<script>\nconst infixToFunction = {\n  \"+\": (x, y) => x + y,\n  \"-\": (x, y) => x - y,\n  \"*\": (x, y) => x * y,\n  \"/\": (x, y) => x / y\n};\n\nconst infixEval = (str, regex) =>\n  str.replace(regex, (_, arg1, fn, arg2) =>\n    infixToFunction[fn](parseFloat(arg1), parseFloat(arg2))\n  );\n\nconst highPrecedence = str => {\n  const regex = /([0-9.]+)([*\\/])([0-9.]+)/;\n  const str2 = infixEval(str, regex);\n  return str === str2 ? str : highPrecedence(str2);\n};\n\nconst spreadsheetFunctions = {\n  \"\": x => x\n};\n\nconst applyFn = str => {\n  const noHigh = highPrecedence(str);\n  const infix = /([0-9.]+)([+-])([0-9.]+)/;\n  const str2 = infixEval(noHigh, infix);\n  const regex = /([a-z]*)\\(([0-9., ]*)\\)(?!.*\\()/i;\n  const toNumberList = args => args.split(\",\").map(parseFloat);\n  const applyFunction = (fn, args) =>\n    spreadsheetFunctions[fn.toLowerCase()](toNumberList(args));\n  return str2.replace(\n    regex,\n    (match, fn, args) =>\n      spreadsheetFunctions.hasOwnProperty(fn.toLowerCase()) ? applyFunction(fn, args) : match\n  );\n};\n\nconst range = (start, end) => {\n  return start > end ? [] : [start].concat([end]);\n}\n</script>\n```\n"}},"pageContext":{"relativeDirectory":"javascript-algorithms-and-data-structures/learn-functional-programming-by-building-a-spreadsheet","id":"5d792535591db67ee15b4106","dashedName":"step-45"}},"staticQueryHashes":["4279786174"],"slicesMap":{}}