{"componentChunkName":"component---src-templates-lesson-jsx","path":"/javascript-algorithms-and-data-structures/learn-functional-programming-by-building-a-spreadsheet/5d79253742f3313d55db981f/","result":{"data":{"markdownRemark":{"id":"e4fcd0bc-87b2-5c03-a647-6a7dc33d20d4","frontmatter":{"challengeType":0,"dashedName":"step-86","title":"Step 86","id":"5d79253742f3313d55db981f"},"rawMarkdownBody":"\n# --description--\n\nReplace `createLabel` with an arrow function with a block body. This would allow us to add more statements. The arrow function should take an argument `x`, and call `createLabel(x)`.\n\n# --hints--\n\nSee description above for instructions.\n\n```js\nassert(\n  /window\\.onload[\\s\\S]*range\\(1,99\\)\\.forEach\\(\\(?x\\)?=>\\{createLabel\\(x\\);?\\}\\);?\\}/.test(\n    code.replace(/\\s/g, '')\n  )\n);\n```\n\n# --seed--\n\n## --before-user-code--\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Spreadsheet</title>\n  <style>\n    #container {\n      display: grid;\n      grid-template-columns: 50px repeat(10, 200px);\n      grid-template-rows: repeat(11, 30px);\n    }\n    .label {\n      background-color: lightgray;\n      text-align: center;\n      vertical-align: middle;\n      line-height: 30px;\n    }\n  </style>\n</head>\n<body>\n<div id=\"container\">\n  <div></div>\n</div>\n```\n\n## --after-user-code--\n\n```html\n</body>\n</html>\n```\n\n## --seed-contents--\n\n```html\n<script>\n\nconst infixToFunction = {\n  \"+\": (x, y) => x + y,\n  \"-\": (x, y) => x - y,\n  \"*\": (x, y) => x * y,\n  \"/\": (x, y) => x / y\n};\n\nconst infixEval = (str, regex) =>\n  str.replace(regex, (_, arg1, fn, arg2) =>\n    infixToFunction[fn](parseFloat(arg1), parseFloat(arg2))\n  );\n\nconst highPrecedence = str => {\n  const regex = /([0-9.]+)([*\\/])([0-9.]+)/;\n  const str2 = infixEval(str, regex);\n  return str === str2 ? str : highPrecedence(str2);\n};\n\nconst spreadsheetFunctions = {\n  \"\": x => x\n};\n\nconst applyFn = str => {\n  const noHigh = highPrecedence(str);\n  const infix = /([0-9.]+)([+-])([0-9.]+)/;\n  const str2 = infixEval(noHigh, infix);\n  const regex = /([a-z]*)\\(([0-9., ]*)\\)(?!.*\\()/i;\n  const toNumberList = args => args.split(\",\").map(parseFloat);\n  const applyFunction = (fn, args) =>\n    spreadsheetFunctions[fn.toLowerCase()](toNumberList(args));\n  return str2.replace(\n    regex,\n    (match, fn, args) =>\n      spreadsheetFunctions.hasOwnProperty(fn.toLowerCase()) ? applyFunction(fn, args) : match\n  );\n};\n\nconst range = (start, end) =>\n  start > end ? [] : [start].concat(range(start + 1, end));\n\nconst charRange = (start, end) =>\n  range(start.charCodeAt(0), end.charCodeAt(0)).map(x =>\n    String.fromCharCode(x)\n  );\n\nconst evalFormula = x => {\n  const rangeRegex = /([A-J])([1-9][0-9]?):([A-J])([1-9][0-9]?)/gi;\n  const rangeFromString = (n1, n2) => range(parseInt(n1), parseInt(n2));\n  const elemValue = n => c => document.getElementById(c + n).value;\n  const addChars = c1 => c2 => n => charRange(c1, c2).map(elemValue(n));\n  const varRangeExpanded = x.replace(rangeRegex, (_, c1, n1, c2, n2) =>\n    rangeFromString(n1, n2).map(addChars(c1)(c2))\n  );\n  const varRegex = /[A-J][1-9][0-9]?/gi;\n  const varExpanded = varRangeExpanded.replace(\n    varRegex,\n    match => document.getElementById(match.toUpperCase()).value\n  );\n  const functionExpanded = applyFn(varExpanded);\n  return functionExpanded === x\n    ? functionExpanded\n    : evalFormula(functionExpanded);\n};\n\n--fcc-editable-region--\nwindow.onload = () => {\n  const container = document.getElementById(\"container\");\n  const createLabel = name => {\n    const label = document.createElement(\"div\");\n    label.className = \"label\";\n    label.textContent = name;\n    container.appendChild(label);\n  };\n  const letters = charRange(\"A\", \"J\");\n  letters.forEach(createLabel);\n  range(1, 99).forEach(createLabel);\n};\n--fcc-editable-region--\n\n\n</script>\n```\n\n# --solutions--\n\n```html\n<script>\nconst infixToFunction = {\n  \"+\": (x, y) => x + y,\n  \"-\": (x, y) => x - y,\n  \"*\": (x, y) => x * y,\n  \"/\": (x, y) => x / y\n};\n\nconst infixEval = (str, regex) =>\n  str.replace(regex, (_, arg1, fn, arg2) =>\n    infixToFunction[fn](parseFloat(arg1), parseFloat(arg2))\n  );\n\nconst highPrecedence = str => {\n  const regex = /([0-9.]+)([*\\/])([0-9.]+)/;\n  const str2 = infixEval(str, regex);\n  return str === str2 ? str : highPrecedence(str2);\n};\n\nconst spreadsheetFunctions = {\n  \"\": x => x\n};\n\nconst applyFn = str => {\n  const noHigh = highPrecedence(str);\n  const infix = /([0-9.]+)([+-])([0-9.]+)/;\n  const str2 = infixEval(noHigh, infix);\n  const regex = /([a-z]*)\\(([0-9., ]*)\\)(?!.*\\()/i;\n  const toNumberList = args => args.split(\",\").map(parseFloat);\n  const applyFunction = (fn, args) =>\n    spreadsheetFunctions[fn.toLowerCase()](toNumberList(args));\n  return str2.replace(\n    regex,\n    (match, fn, args) =>\n      spreadsheetFunctions.hasOwnProperty(fn.toLowerCase()) ? applyFunction(fn, args) : match\n  );\n};\n\nconst range = (start, end) =>\n  start > end ? [] : [start].concat(range(start + 1, end));\n\nconst charRange = (start, end) =>\n  range(start.charCodeAt(0), end.charCodeAt(0)).map(x =>\n    String.fromCharCode(x)\n  );\n\nconst evalFormula = x => {\n  const rangeRegex = /([A-J])([1-9][0-9]?):([A-J])([1-9][0-9]?)/gi;\n  const rangeFromString = (n1, n2) => range(parseInt(n1), parseInt(n2));\n  const elemValue = n => c => document.getElementById(c + n).value;\n  const addChars = c1 => c2 => n => charRange(c1, c2).map(elemValue(n));\n  const varRangeExpanded = x.replace(rangeRegex, (_, c1, n1, c2, n2) =>\n    rangeFromString(n1, n2).map(addChars(c1)(c2))\n  );\n  const varRegex = /[A-J][1-9][0-9]?/gi;\n  const varExpanded = varRangeExpanded.replace(\n    varRegex,\n    match => document.getElementById(match.toUpperCase()).value\n  );\n  const functionExpanded = applyFn(varExpanded);\n  return functionExpanded === x\n    ? functionExpanded\n    : evalFormula(functionExpanded);\n};\n\nwindow.onload = () => {\n  const container = document.getElementById(\"container\");\n  const createLabel = name => {\n    const label = document.createElement(\"div\");\n    label.className = \"label\";\n    label.textContent = name;\n    container.appendChild(label);\n  };\n  const letters = charRange(\"A\", \"J\");\n  letters.forEach(createLabel);\n  range(1, 99).forEach(x => {\n    createLabel(x);\n  });\n};\n</script>\n```\n"}},"pageContext":{"relativeDirectory":"javascript-algorithms-and-data-structures/learn-functional-programming-by-building-a-spreadsheet","id":"5d79253742f3313d55db981f","dashedName":"step-86"}},"staticQueryHashes":["4279786174"],"slicesMap":{}}