{"componentChunkName":"component---src-templates-lesson-jsx","path":"/javascript-algorithms-and-data-structures/build-a-roman-numeral-converter-project/a7f4d8f2483413a6ce226cac/","result":{"data":{"markdownRemark":{"id":"1d91b861-5d72-5878-b1e2-a28cc4d2324b","frontmatter":{"challengeType":5,"dashedName":"build-a-roman-numeral-converter","title":"Build A Roman Numeral Converter","id":"a7f4d8f2483413a6ce226cac"},"rawMarkdownBody":"\n# --description--\n\nConvert the given number into a roman numeral.\n\n| Roman numerals | Arabic numerals |\n|----------------|-----------------|\n| M              | 1000            |\n| CM             | 900             |\n| D              | 500             |\n| CD             | 400             |\n| C              | 100             |\n| XC             | 90              |\n| L              | 50              |\n| XL             | 40              |\n| X              | 10              |\n| IX             | 9               |\n| V              | 5               |\n| IV             | 4               |\n| I              | 1               |\n\nAll roman numerals answers should be provided in upper-case.\n\n# --hints--\n\n`convertToRoman(2)` should return the string `II`.\n\n```js\nassert.deepEqual(convertToRoman(2), 'II');\n```\n\n`convertToRoman(3)` should return the string `III`.\n\n```js\nassert.deepEqual(convertToRoman(3), 'III');\n```\n\n`convertToRoman(4)` should return the string `IV`.\n\n```js\nassert.deepEqual(convertToRoman(4), 'IV');\n```\n\n`convertToRoman(5)` should return the string `V`.\n\n```js\nassert.deepEqual(convertToRoman(5), 'V');\n```\n\n`convertToRoman(9)` should return the string `IX`.\n\n```js\nassert.deepEqual(convertToRoman(9), 'IX');\n```\n\n`convertToRoman(12)` should return the string `XII`.\n\n```js\nassert.deepEqual(convertToRoman(12), 'XII');\n```\n\n`convertToRoman(16)` should return the string `XVI`.\n\n```js\nassert.deepEqual(convertToRoman(16), 'XVI');\n```\n\n`convertToRoman(29)` should return the string `XXIX`.\n\n```js\nassert.deepEqual(convertToRoman(29), 'XXIX');\n```\n\n`convertToRoman(44)` should return the string `XLIV`.\n\n```js\nassert.deepEqual(convertToRoman(44), 'XLIV');\n```\n\n`convertToRoman(45)` should return the string `XLV`.\n\n```js\nassert.deepEqual(convertToRoman(45), 'XLV');\n```\n\n`convertToRoman(68)` should return the string `LXVIII`\n\n```js\nassert.deepEqual(convertToRoman(68), 'LXVIII');\n```\n\n`convertToRoman(83)` should return the string `LXXXIII`\n\n```js\nassert.deepEqual(convertToRoman(83), 'LXXXIII');\n```\n\n`convertToRoman(97)` should return the string `XCVII`\n\n```js\nassert.deepEqual(convertToRoman(97), 'XCVII');\n```\n\n`convertToRoman(99)` should return the string `XCIX`\n\n```js\nassert.deepEqual(convertToRoman(99), 'XCIX');\n```\n\n`convertToRoman(400)` should return the string `CD`\n\n```js\nassert.deepEqual(convertToRoman(400), 'CD');\n```\n\n`convertToRoman(500)` should return the string `D`\n\n```js\nassert.deepEqual(convertToRoman(500), 'D');\n```\n\n`convertToRoman(501)` should return the string `DI`\n\n```js\nassert.deepEqual(convertToRoman(501), 'DI');\n```\n\n`convertToRoman(649)` should return the string `DCXLIX`\n\n```js\nassert.deepEqual(convertToRoman(649), 'DCXLIX');\n```\n\n`convertToRoman(798)` should return the string `DCCXCVIII`\n\n```js\nassert.deepEqual(convertToRoman(798), 'DCCXCVIII');\n```\n\n`convertToRoman(891)` should return the string `DCCCXCI`\n\n```js\nassert.deepEqual(convertToRoman(891), 'DCCCXCI');\n```\n\n`convertToRoman(1000)` should return the string `M`\n\n```js\nassert.deepEqual(convertToRoman(1000), 'M');\n```\n\n`convertToRoman(1004)` should return the string `MIV`\n\n```js\nassert.deepEqual(convertToRoman(1004), 'MIV');\n```\n\n`convertToRoman(1006)` should return the string `MVI`\n\n```js\nassert.deepEqual(convertToRoman(1006), 'MVI');\n```\n\n`convertToRoman(1023)` should return the string `MXXIII`\n\n```js\nassert.deepEqual(convertToRoman(1023), 'MXXIII');\n```\n\n`convertToRoman(2014)` should return the string `MMXIV`\n\n```js\nassert.deepEqual(convertToRoman(2014), 'MMXIV');\n```\n\n`convertToRoman(3999)` should return the string `MMMCMXCIX`\n\n```js\nassert.deepEqual(convertToRoman(3999), 'MMMCMXCIX');\n```\n\n# --seed--\n\n## --seed-contents--\n\n```js\nfunction convertToRoman(num) {\n return num;\n}\n\nconvertToRoman(36);\n```\n\n# --solutions--\n\n```js\nfunction convertToRoman(num) {\n  var ref = [['M', 1000], ['CM', 900], ['D', 500], ['CD', 400], ['C', 100], ['XC', 90], ['L', 50], ['XL', 40], ['X', 10], ['IX', 9], ['V', 5], ['IV', 4], ['I', 1]];\n  var res = [];\n  ref.forEach(function(p) {\n    while (num >= p[1]) {\n      res.push(p[0]);\n      num -= p[1];\n    }\n  });\n  return res.join('');\n}\n```\n"}},"pageContext":{"relativeDirectory":"javascript-algorithms-and-data-structures/build-a-roman-numeral-converter-project","id":"a7f4d8f2483413a6ce226cac","dashedName":"build-a-roman-numeral-converter"}},"staticQueryHashes":["4279786174"],"slicesMap":{}}