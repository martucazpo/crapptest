{"componentChunkName":"component---src-templates-lesson-jsx","path":"/javascript-algorithms-and-data-structures/learn-functional-programming-by-building-a-spreadsheet/5d7925335ab63018dcec11fe/","result":{"data":{"markdownRemark":{"id":"e1781f3a-7662-5575-bc30-7cba8374b8c6","frontmatter":{"challengeType":0,"dashedName":"step-19","title":"Step 19","id":"5d7925335ab63018dcec11fe"},"rawMarkdownBody":"\n# --description--\n\nArrow functions can have multiple statements:\n\n```js\nconst fn = (x, y) => {\n  const result = x + y;\n  return result; // explicit return statement required\n};\n```\n\nUse this syntax for the `highPrecedence` function.\n\n# --hints--\n\nSee description above for instructions.\n\n```js\nassert(code.replace(/\\s/g, '').includes('highPrecedence=str=>{returnstr'));\n```\n\n# --seed--\n\n## --before-user-code--\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Spreadsheet</title>\n  <style>\n    #container {\n      display: grid;\n      grid-template-columns: 50px repeat(10, 200px);\n      grid-template-rows: repeat(11, 30px);\n    }\n    .label {\n      background-color: lightgray;\n      text-align: center;\n      vertical-align: middle;\n      line-height: 30px;\n    }\n  </style>\n</head>\n<body>\n<div id=\"container\">\n  <div></div>\n</div>\n```\n\n## --after-user-code--\n\n```html\n</body>\n</html>\n```\n\n## --seed-contents--\n\n```html\n<script>\n\nconst infixToFunction = {\n  \"+\": (x, y) => x + y,\n  \"-\": (x, y) => x - y,\n  \"*\": (x, y) => x * y,\n  \"/\": (x, y) => x / y\n};\n\nconst infixEval = (str, regex) =>\n  str.replace(regex, (_, arg1, fn, arg2) =>\n    infixToFunction[fn](parseFloat(arg1), parseFloat(arg2)));\n\n--fcc-editable-region--\nconst highPrecedence = str => str;\n--fcc-editable-region--\n\n\n</script>\n```\n\n# --solutions--\n\n```html\n<script>\nconst infixToFunction = {\n  \"+\": (x, y) => x + y,\n  \"-\": (x, y) => x - y,\n  \"*\": (x, y) => x * y,\n  \"/\": (x, y) => x / y\n};\n\nconst infixEval = (str, regex) =>\n  str.replace(regex, (_, arg1, fn, arg2) =>\n    infixToFunction[fn](parseFloat(arg1), parseFloat(arg2))\n  );\n\nconst highPrecedence = str => {\n  return str;\n};\n</script>\n```\n"}},"pageContext":{"relativeDirectory":"javascript-algorithms-and-data-structures/learn-functional-programming-by-building-a-spreadsheet","id":"5d7925335ab63018dcec11fe","dashedName":"step-19"}},"staticQueryHashes":["4279786174"],"slicesMap":{}}