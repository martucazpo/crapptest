{"componentChunkName":"component---src-templates-lesson-jsx","path":"/javascript-algorithms-and-data-structures/learn-advanced-array-methods-by-building-a-statistics-calculator/6352fe473d53592a40ae403b/","result":{"data":{"markdownRemark":{"id":"08c63f5d-0681-556c-92ee-336f4159cd08","frontmatter":{"challengeType":0,"dashedName":"step-42","title":"Step 42","id":"6352fe473d53592a40ae403b"},"rawMarkdownBody":"\n# --description--\n\nWithin your empty `.reduce()` callback, declare a variable `difference` and set it to the value of `el` minus `mean`. Then declare a `squared` variable, and set it to the value of `difference` to the power of `2`. Finally, return the value of `acc` plus `squared`.\n\n# --hints--\n\nYour `reduce` callback should have a `difference` variable.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(function\\s*\\(?\\s*acc\\s*,\\s*el\\s*\\)?\\s*\\{\\s*var\\s*difference\\s*=/);\n```\n\nYour `difference` variable should be set to the value of `el` minus `mean`.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(function\\s*\\(?\\s*acc\\s*,\\s*el\\s*\\)?\\s*\\{\\s*var\\s*difference\\s*=\\s*el\\s*-\\s*mean\\s*;/);\n```\n\nYour `reduce` callback should have a `squared` variable.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(function\\s*\\(?\\s*acc\\s*,\\s*el\\s*\\)?\\s*\\{\\s*var\\s*difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s*squared\\s*=/);\n```\n\nYour `squared` variable should be set to the value of `difference` to the power of 2.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(function\\s*\\(?\\s*acc\\s*,\\s*el\\s*\\)?\\s*\\{\\s*var\\s*difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s*squared\\s*=\\s*Math\\.pow\\(\\s*difference\\s*,\\s*2\\s*\\);/);\n```\n\nYour `reduce` callback should return the value of `acc` plus `squared`.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(function\\s*\\(?\\s*acc\\s*,\\s*el\\s*\\)?\\s*\\{\\s*var\\s*difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s*squared\\s*=\\s*Math\\.pow\\(\\s*difference\\s*,\\s*2\\s*\\);\\s*return\\s*acc\\s*\\+\\s*squared\\s*;/);\n```\n\nYou should not remove the initial value of `0` from your `.reduce()` method.\n\n```js\nassert.match(getVariance.toString(), /variance\\s*=\\s*array\\.reduce\\(function\\s*\\(?\\s*acc\\s*,\\s*el\\s*\\)?\\s*\\{\\s*var\\s*difference\\s*=\\s*el\\s*-\\s*mean\\s*;\\s*var\\s*squared\\s*=\\s*Math\\.pow\\(\\s*difference\\s*,\\s*2\\s*\\);\\s*return\\s*acc\\s*\\+\\s*squared\\s*;\\s*\\}\\s*,\\s*0\\)/);\n```\n\n# --seed--\n\n## --seed-contents--\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>\n```\n\n```css\nbody {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}\n```\n\n```js\nconst getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  const median =\n    array.length % 2 === 0\n      ? getMean([sorted[array.length / 2], sorted[array.length / 2 - 1]])\n      : sorted[Math.floor(array.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\n--fcc-editable-region--\nconst getVariance = (array) => {\n  const mean = getMean(array);\n  const variance = array.reduce((acc, el) => {\n\n  }, 0);\n}\n--fcc-editable-region--\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n  const range = getRange(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n  document.querySelector(\"#range\").textContent = range;\n}\n```\n"}},"pageContext":{"relativeDirectory":"javascript-algorithms-and-data-structures/learn-advanced-array-methods-by-building-a-statistics-calculator","id":"6352fe473d53592a40ae403b","dashedName":"step-42"}},"staticQueryHashes":["4279786174"],"slicesMap":{}}